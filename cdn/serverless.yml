service: acceptessa2-cdn-circlecut
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # versionFunctions: false
  deploymentBucket: serverless-upload-us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: ["arn:aws:logs:*:*:*"]

custom:
  domain: familiar-life.info

#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  viewerRequest:
    handler: handler.viewer_request
    memorySize: 128
    timeout: 5

  originResponse:
    handler: handler.origin_response
    memorySize: 128
    timeout: 30

resources:
  Description: acceptessa circlecut
  Resources:
    ## override
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"
              Action: ["sts:AssumeRole"]

    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}"

    ViewerRequestFunctionVersion:
      Type: AWS::Lambda::Version
      Properties:
        FunctionName: !Ref ViewerRequestLambdaFunction
        Description: "acceptessa circlecut ViewerRequestFunction"

    OriginResponseFunctionVersion:
      Type: AWS::Lambda::Version
      Properties:
        FunctionName: !Ref OriginResponseLambdaFunction
        Description: "acceptessa circlecut OriginResponseFunction"

    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: accceptessa circlecut

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: OriginAccessIdentity
      Properties:
        Bucket: { Ref: Bucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Principal:
                AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}"
              Resource:
                Fn::Join: [ "/", [ { Fn::GetAtt: [ Bucket, Arn ] }, "*" ] ]

    Cloudfront:
      Type: AWS::CloudFront::Distribution
      DependsOn: OriginAccessIdentity
      Properties:
        DistributionConfig:
          Comment: acceptessa circlecut
          # Aliases: ["circlecut.${self:custom.domain}"]
          HttpVersion: http2
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          DefaultCacheBehavior:
            LambdaFunctionAssociations:
              - EventType: 'viewer-request'
                LambdaFunctionARN: !Ref ViewerRequestFunctionVersion
              - EventType: 'origin-response'
                LambdaFunctionARN: !Ref OriginResponseFunctionVersion
            TargetOriginId: s3
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
              Headers: ["Origin"]
            MinTTL: 86400
            MaxTTL: 86400
            DefaultTTL: 86400
          Enabled: true
          Origins:
            - Id: s3
              DomainName: "${self:service}.s3.amazonaws.com"
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"

    # RecordSet:
    #   Type: AWS::Route53::RecordSet
    #   Properties:
    #     HostedZoneName: "${self:custom.domain}."
    #     Type: CNAME
    #     TTL: 300
    #     Name: "circlecut.${self:custom.domain}."
    #     ResourceRecords:
    #       - Fn::Join: [ "", [ { Fn::GetAtt: [Cloudfront, DomainName] }, "." ] ]
